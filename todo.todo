Elements:

Extremely simple game:
 ✔ One type of card - 1/1 unit with no casting cost @done (22-02-13 17:40)
 ✔ Possible actions @done (22-02-13 17:40)
     ✔ Play card @done (21-02-13 23:14)
     ✔ Move unit @done (21-02-13 23:14)
     ✔ Attack unit with unit @done (21-02-13 23:14)
     ✔ End turn @done (22-02-13 17:40)
 ✔ Plain page to trigger actions and observe result @done (25-02-13 22:10)

Slightly less simple game:
 ✔ Attack unit with unit via GUI @done (25-02-13 22:38)
 ✔ Draw a card at the beginning of the players turn @done (26-02-13 17:29)
 ✔ Refactor code (especially modules into classes) @done (26-02-13 22:09)
 ✔ Implement energy sources @done (27-02-13 22:18)
 ✔ Implement spells @done (27-02-13 22:18)
 ✔ Consider expanding spells with precondition information about targets, e.g. { targets: ["unit"] } or { targets: ["unit", "energy-source", "player"]} @done (27-02-13 22:19)
 ✔ Implement basic spell script system @done (27-02-13 22:18)

Somewhat simple game:
 ✔ Fix introduced bug: Playing spells on units does not work @done (28-02-13 23:06)
 ✔ Split into /client and /server and let server.js require('./server/api') instead @done (28-02-13 23:06)
 ✔ Implement card cost @done (02-03-13 17:51)
 ✔ Collect all available player actions @done (10-03-13 00:02)
     ✔ Move @done (04-03-13 21:40)
     ✔ Attack @done (04-03-13 21:40)
     ✔ Play @done (04-03-13 22:57)
     ✔ End turn @done (04-03-13 21:40)
     ✔ Implement unit placement restrictions @done (05-03-13 22:43)
     ✔ Implement winning/losing condition @done (10-03-13 00:02)
 ✔ Handle two players @done (10-03-13 00:02)
 ✔ Implement a basic AI @done (10-03-13 00:02)
 ✔ Replenish unit attack and move counts @done (10-03-13 00:02)
 ✔ Replenish energy @done (10-03-13 00:02)

Simple game:
 ✔ Defender does not attack @done (11-03-13 21:35)
 ✔ Create a unit with an ability @done (13-03-13 18:20)
 ✔ Handle paying for spells when generating list of possible actions @done (13-03-13 23:19)
 ✔ Shuffle libraries at game start @done (28-03-13 23:16)
 ✔ Handle two human players @done (22-05-13 15:45)
 ✔ Naive greedy AI: Improve AI by selecting the best possible action amount the available @done (13-03-13 18:20)

Persistent games:
 ✔ Multiple games in progress at once @done (29-04-13 22:04)
 ✔ Users in database @done (29-04-13 22:04)
 ✔ Games in database @done (29-04-13 22:04)
 ✔ Game actions in database @done (29-04-13 22:04)
 ✔ Page to view games @done (29-04-13 22:04)
 ✔ Load initial state from database @done (16-05-13 22:39)
 ✔ Notify players when it's their turn @done (22-05-13 15:45)
 ✔ Clean up old code and files @done (16-05-13 22:39)

Improved persistent games:
 ✔ Store all cards in database @done (16-05-13 22:39)
 ✔ Handle decks of cards in database @done (22-05-13 15:46)
 ☐ Clean up gameactions.js
     ✔ Make a pure Map class @done (27-05-13 21:24)
     ✘ Make an Entity class to represent an unit/tower/energy object on the map. Should inherit from eventEmitter @cancelled (02-06-13 20:53)
     ✘ Move the non-specific functions into prototype objects @cancelled (02-06-13 20:53)
     ✘ Create a utilities-decorator can takes state as an argument OR add utilities functions directly to state @cancelled (02-06-13 20:53)
     ☐ Move calculation of possible actions into its own module
     ✔ Remove redundant guards @done (11-03-13 21:35)
 ✔ Improve the way game states are requested (i.e. should never request same action index twice) @done (02-06-13 21:41)
 ☐ Trim the data that is sent to the player (e.g. remove library, enemy hand etc.)
 ✔ Handle AI players @done (02-06-13 20:44)
 ☐ Create AI players with decks
 ☐ Make a new deployment to heroku

Improved gameplay:
 ☐ Implement event system for relevant classes
 ☐ Make system for handling effects on entities (push/remove from stack)
 ☐ Handle "until end of turn"-effects
 ☐ Improve game system to allow more complex cards (e.g. react to stage changes)
     ☐ Test case: Unit that has "~ has +2 to attack when it is your turn and +2 to life when it is other players turns"
     ☐ Test case: Unit that has "Draw a card when ~ damages an energy source"
     ☐ Additional optional test cases:
         ☐ Test case: Unit that has "Attacks the first enemy unit within range in other players turns"
         ☐ Test case: Spell that has "Gain control of target unit"
         ☐ Test case: Unit that has "Allies spawned within [range 1] of ~ gain +1 to attack"
 ☐ Class for composing a query of the game state
 ☐ Make custom "on"-function takes multiple keys and guards against invalid bindings
 ☐ Unit tests

--- ✄ -----------------------

Misc. improvements:
 ☐ Include an "About"-page that has technologies used, game icons and music credit etc..
 ✔ Include a "Page guide" functionality menu item that uses Chardin.js to give static page help @done (18-05-13 23:49)
 ☐ Improve page guide descriptions
 ☐ Include a game manual page
 ☐ Make an API that takes/returns only JSON data
 ☐ Make the client-side completely AngularJS-based
 ☐ Deck editor

Hexagonal grid:
 ☐ Make basic KineticJS implementation of map rendering
 ☐ Make hex-map class

Optimizations:
 ✔ gzip compression @done (02-03-13 15:59)
 ☐ Add socket.io for web network communication
 ☐ Compile and persist the content of spell script files instead of reading them up on each execution
 ☐ Maybe a bad idea: Share gameactions.js between both client and server and allow the client to do all actions (note: what about spells?) offline until EndTurn(). Persist the actions and send them when ending the turn.
 ☐ Get list of all players units and use that for the current state instead of querying it each time
 ☐ Get list of all players energy sources and use that for the current state instead of querying it each time
 ☐ Make a socket only API that simply returns actions for the client to use, instead of returning all states (bad idea - too much client-side logic?)

Very high-level long-term additions:
 ☐ Adventure mode
     ☐ Large, persistant world
     ☐ x moves per y time unit (e.g. 10 moves per hour)
 ☐ Leaderboards
 ☐ Achievements
 ☐ Different maps
 ☐ Different game types (capture the flag, tower defence, etc.)
 ☐ Game/board/card/player statistics
 ☐ Ability to edit/create cards
 ☐ Ability to edit/create maps
 ☐ Ability to edit/create AI
 ☐ Player progress (improve stats over time and level)
 ☐ User-created content
     ☐ Cards (moderators only?)
     ☐ Maps
     ☐ AI's
     ☐ Game modes?

