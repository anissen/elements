Elements:

Extremely simple game:
 ✔ One type of card - 1/1 unit with no casting cost @done (22-02-13 17:40)
 ✔ Possible actions @done (22-02-13 17:40)
     ✔ Play card @done (21-02-13 23:14)
     ✔ Move unit @done (21-02-13 23:14)
     ✔ Attack unit with unit @done (21-02-13 23:14)
     ✔ End turn @done (22-02-13 17:40)
 ✔ Plain page to trigger actions and observe result @done (25-02-13 22:10)

 Slightly less simple game:
 ✔ Attack unit with unit via GUI @done (25-02-13 22:38)
 ✔ Draw a card at the beginning of the players turn @done (26-02-13 17:29)
 ✔ Refactor code (especially modules into classes) @done (26-02-13 22:09)
 ✔ Implement energy sources @done (27-02-13 22:18)
 ✔ Implement spells @done (27-02-13 22:18)
 ✔ Consider expanding spells with precondition information about targets, e.g. { targets: ["unit"] } or { targets: ["unit", "energy-source", "player"]} @done (27-02-13 22:19)
 ✔ Implement basic spell script system @done (27-02-13 22:18)

 Somewhat simple game:
 ✔ Fix introduced bug: Playing spells on units does not work @done (28-02-13 23:06)
 ✔ Split into /client and /server and let server.js require('./server/api') instead @done (28-02-13 23:06)
 ✔ Implement card cost @done (02-03-13 17:51)
 ☐ Collect all available player actions
     ✔ Move @done (04-03-13 21:40)
     ✔ Attack @done (04-03-13 21:40)
     ✔ Play @done (04-03-13 22:57)
     ✔ End turn @done (04-03-13 21:40)
     ✔ Implement unit placement restrictions @done (05-03-13 22:43)
     ☐ Implement winning/losing condition
 ☐ Handle two players
 ☐ Implement a basic AI
 ☐ Replenish unit attack and move counts
 ☐ Replenish energy

 Simple game:
 ☐ Clean up gameactions.js
     ☐ Create a utilities-decorator can takes state as an argument OR add utilities functions directly to state
     ☐ Move calculation of possible actions into its own module
     ☐ Remove redundant guards
 ☐ Handle two human players
 ☐ Trim the data that is sent to the player (e.g. remove library, enemy hand etc.)
 ☐ Unit tests


--- ✄ -----------------------


Optimizations:
 ✔ gzip compression @done (02-03-13 15:59)
 ☐ Add socket.io for web network communication
 ☐ Persist the content of spell script files instead of reading them up on each execution
 ☐ Maybe a bad idea: Share gameactions.js between both client and server and allow the client to do all actions (note: what about spells?) offline until EndTurn(). Persist the actions and send them when ending the turn.
